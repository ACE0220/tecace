/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace grpc {
    export namespace health {
        export namespace v1 {
            export interface HealthCheckRequest {
            service?: string;
            }
            export interface HealthCheckResponse {
            status?: HealthCheckResponse.ServingStatus;
            }
            export namespace HealthCheckResponse {
                export enum ServingStatus {
                    UNKNOWN = 0,
                    SERVING = 1,
                    NOT_SERVING = 2,
                    // Used only by the Watch method.
                    SERVICE_UNKNOWN = 3,
                }
            }
            // tslint:disable-next-line:no-empty-interface
            export interface Empty {
            }
            export interface Health {
                check(
                    data: HealthCheckRequest,
                    metadata?: Metadata,
                    ...rest: any[]
                ): Observable<HealthCheckResponse>;
                deregister(
                    data: Empty,
                    metadata?: Metadata,
                    ...rest: any[]
                ): Observable<Empty>;
                register(
                    data: Empty,
                    metadata?: Metadata,
                    ...rest: any[]
                ): Observable<Empty>;
                watch(
                    data: HealthCheckRequest,
                    metadata?: Metadata,
                    ...rest: any[]
                ): Observable<HealthCheckResponse>;
            }
        }
    }
}

