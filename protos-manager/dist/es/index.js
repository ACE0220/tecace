import { glob } from 'glob';
import { resolve } from 'path';
import * as protoLoader from '@grpc/proto-loader';

function scanProtos() {
    const packageNames = new Set();
    const protoFiles = glob
        .sync(resolve(__dirname, '../', '**/*.proto'), {
        ignore: ['node_modules/**'],
        nodir: true,
        absolute: true,
    })
        .filter((item) => item.includes('dist'));
    const packageDefinition = protoLoader.loadSync(protoFiles, {
        keepCase: true,
        longs: String,
        enums: String,
        defaults: true,
        oneofs: true,
    });
    for (const key in packageDefinition) {
        const splitArr = key.split('.');
        const packageName = splitArr.slice(0, splitArr.length - 1).join('.');
        packageNames.add(packageName);
    }
    return {
        packages: Array.from(packageNames),
        protos: protoFiles,
    };
}
class ProtosLoader {
    static getInstance() {
        if (!this.instance) {
            this.instance = new ProtosLoader();
        }
        return this.instance;
    }
    constructor() {
        this.datas = scanProtos();
    }
    getTypes() {
        return this.datas.types;
    }
    getProtos() {
        return this.datas.protos;
    }
    getPackages() {
        return this.datas.packages;
    }
}
const protosLoader = ProtosLoader.getInstance();

/**
* This file is auto-generated by nestjs-proto-gen-ts
*/
var grpc;
(function (grpc) {
    (function (health) {
        (function (v1) {
            (function (HealthCheckResponse) {
                (function (ServingStatus) {
                    ServingStatus[ServingStatus["UNKNOWN"] = 0] = "UNKNOWN";
                    ServingStatus[ServingStatus["SERVING"] = 1] = "SERVING";
                    ServingStatus[ServingStatus["NOT_SERVING"] = 2] = "NOT_SERVING";
                    // Used only by the Watch method.
                    ServingStatus[ServingStatus["SERVICE_UNKNOWN"] = 3] = "SERVICE_UNKNOWN";
                })(HealthCheckResponse.ServingStatus || (HealthCheckResponse.ServingStatus = {}));
            })(v1.HealthCheckResponse || (v1.HealthCheckResponse = {}));
        })(health.v1 || (health.v1 = {}));
    })(grpc.health || (grpc.health = {}));
})(grpc || (grpc = {}));

export { grpc, protosLoader, scanProtos };
